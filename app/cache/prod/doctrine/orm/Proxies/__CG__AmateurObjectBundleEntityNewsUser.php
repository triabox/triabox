<?php

namespace Proxies\__CG__\Amateur\ObjectBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class NewsUser extends \Amateur\ObjectBundle\Entity\NewsUser implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setComment($comment)
    {
        $this->__load();
        return parent::setComment($comment);
    }

    public function getComment()
    {
        $this->__load();
        return parent::getComment();
    }

    public function setNewsPath($newsPath)
    {
        $this->__load();
        return parent::setNewsPath($newsPath);
    }

    public function getNewsPath()
    {
        $this->__load();
        return parent::getNewsPath();
    }

    public function setUser($user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setCreateTime($createTime)
    {
        $this->__load();
        return parent::setCreateTime($createTime);
    }

    public function getCreateTime()
    {
        $this->__load();
        return parent::getCreateTime();
    }

    public function setUserId($userId)
    {
        $this->__load();
        return parent::setUserId($userId);
    }

    public function getUserId()
    {
        $this->__load();
        return parent::getUserId();
    }

    public function getLikes()
    {
        $this->__load();
        return parent::getLikes();
    }

    public function setLikes(\Doctrine\Common\Collections\ArrayCollection $likes)
    {
        $this->__load();
        return parent::setLikes($likes);
    }

    public function getEvent()
    {
        $this->__load();
        return parent::getEvent();
    }

    public function setEvent(\Amateur\ObjectBundle\Entity\Event $event)
    {
        $this->__load();
        return parent::setEvent($event);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getEnrolled()
    {
        $this->__load();
        return parent::getEnrolled();
    }

    public function setEnrolled(\Amateur\ObjectBundle\Entity\Enrolled $enrolled)
    {
        $this->__load();
        return parent::setEnrolled($enrolled);
    }

    public function getFriend()
    {
        $this->__load();
        return parent::getFriend();
    }

    public function setFriend(\Amateur\ObjectBundle\Entity\User $friend)
    {
        $this->__load();
        return parent::setFriend($friend);
    }

    public function getNewsUsers()
    {
        $this->__load();
        return parent::getNewsUsers();
    }

    public function setNewsUsers($newsUsers)
    {
        $this->__load();
        return parent::setNewsUsers($newsUsers);
    }

    public function addNewsUsers($newsUsers)
    {
        $this->__load();
        return parent::addNewsUsers($newsUsers);
    }

    public function removeNewsUsers($newsUsers)
    {
        $this->__load();
        return parent::removeNewsUsers($newsUsers);
    }

    public function getActivity()
    {
        $this->__load();
        return parent::getActivity();
    }

    public function setActivity($activity)
    {
        $this->__load();
        return parent::setActivity($activity);
    }

    public function getUrlImagen()
    {
        $this->__load();
        return parent::getUrlImagen();
    }

    public function setUrlImagen($urlImagen)
    {
        $this->__load();
        return parent::setUrlImagen($urlImagen);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getUrl()
    {
        $this->__load();
        return parent::getUrl();
    }

    public function setUrl($url)
    {
        $this->__load();
        return parent::setUrl($url);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'comment', 'newsPath', 'userId', 'createTime', 'type', 'urlImagen', 'title', 'description', 'url', 'enrolled', 'event', 'friend', 'activity', 'likes', 'user', 'newsUsers');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}