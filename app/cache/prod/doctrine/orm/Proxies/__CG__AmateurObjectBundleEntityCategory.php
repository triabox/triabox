<?php

namespace Proxies\__CG__\Amateur\ObjectBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Category extends \Amateur\ObjectBundle\Entity\Category implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setCode($code)
    {
        $this->__load();
        return parent::setCode($code);
    }

    public function getCode()
    {
        $this->__load();
        return parent::getCode();
    }

    public function setIsGlobal($isGlobal)
    {
        $this->__load();
        return parent::setIsGlobal($isGlobal);
    }

    public function getIsGlobal()
    {
        $this->__load();
        return parent::getIsGlobal();
    }

    public function getEvents()
    {
        $this->__load();
        return parent::getEvents();
    }

    public function setEvents($events)
    {
        $this->__load();
        return parent::setEvents($events);
    }

    public function getDistanceTotal()
    {
        $this->__load();
        return parent::getDistanceTotal();
    }

    public function setDistanceTotal($distanceTotal)
    {
        $this->__load();
        return parent::setDistanceTotal($distanceTotal);
    }

    public function getDistanceFirstRun()
    {
        $this->__load();
        return parent::getDistanceFirstRun();
    }

    public function setDistanceFirstRun($distanceFirstRun)
    {
        $this->__load();
        return parent::setDistanceFirstRun($distanceFirstRun);
    }

    public function getDistanceLastRun()
    {
        $this->__load();
        return parent::getDistanceLastRun();
    }

    public function setDistanceLastRun($distanceLastRun)
    {
        $this->__load();
        return parent::setDistanceLastRun($distanceLastRun);
    }

    public function getDistanceSwim()
    {
        $this->__load();
        return parent::getDistanceSwim();
    }

    public function setDistanceSwim($distanceSwim)
    {
        $this->__load();
        return parent::setDistanceSwim($distanceSwim);
    }

    public function getDistanceBike()
    {
        $this->__load();
        return parent::getDistanceBike();
    }

    public function setDistanceBike($distanceBike)
    {
        $this->__load();
        return parent::setDistanceBike($distanceBike);
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'code', 'isGlobal', 'distanceTotal', 'distanceFirstRun', 'distanceLastRun', 'distanceSwim', 'distanceBike', 'events');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}