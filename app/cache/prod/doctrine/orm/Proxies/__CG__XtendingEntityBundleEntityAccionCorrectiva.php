<?php

namespace Proxies\__CG__\Xtending\EntityBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class AccionCorrectiva extends \Xtending\EntityBundle\Entity\AccionCorrectiva implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getDescripcionesVerificaciones()
    {
        $this->__load();
        return parent::getDescripcionesVerificaciones();
    }

    public function addDescripcionesVerificacion($descripcionesVerificaciones)
    {
        $this->__load();
        return parent::addDescripcionesVerificacion($descripcionesVerificaciones);
    }

    public function removeDescripcionesVerificacion($descripcionesVerificaciones)
    {
        $this->__load();
        return parent::removeDescripcionesVerificacion($descripcionesVerificaciones);
    }

    public function getCausasPropuestas()
    {
        $this->__load();
        return parent::getCausasPropuestas();
    }

    public function addCausasPropuesta($causasPropuestas)
    {
        $this->__load();
        return parent::addCausasPropuesta($causasPropuestas);
    }

    public function removeCausasPropuesta($causasPropuestas)
    {
        $this->__load();
        return parent::removeCausasPropuesta($causasPropuestas);
    }

    public function getAccionesEjecuciones()
    {
        $this->__load();
        return parent::getAccionesEjecuciones();
    }

    public function addAccionesEjecucione($accionesEjecuciones)
    {
        $this->__load();
        return parent::addAccionesEjecucione($accionesEjecuciones);
    }

    public function removeAccionesEjecucione($accionesEjecuciones)
    {
        $this->__load();
        return parent::removeAccionesEjecucione($accionesEjecuciones);
    }

    public function getVerificacionesEfectivas()
    {
        $this->__load();
        return parent::getVerificacionesEfectivas();
    }

    public function addVerificacionesEfectiva($verificacion)
    {
        $this->__load();
        return parent::addVerificacionesEfectiva($verificacion);
    }

    public function removeVerificacionesEfectiva($verificacion)
    {
        $this->__load();
        return parent::removeVerificacionesEfectiva($verificacion);
    }

    public function addFormularioResultado(\Xtending\EntityBundle\Entity\FormulariosResultados $formularioResultado)
    {
        $this->__load();
        return parent::addFormularioResultado($formularioResultado);
    }

    public function getFormularioResultado()
    {
        $this->__load();
        return parent::getFormularioResultado();
    }

    public function setFormularioResultado($formularioResultado)
    {
        $this->__load();
        return parent::setFormularioResultado($formularioResultado);
    }

    public function setFechaInicio($fechaInicio)
    {
        $this->__load();
        return parent::setFechaInicio($fechaInicio);
    }

    public function getFechaInicio()
    {
        $this->__load();
        return parent::getFechaInicio();
    }

    public function setNombre($nombre)
    {
        $this->__load();
        return parent::setNombre($nombre);
    }

    public function getNombre()
    {
        $this->__load();
        return parent::getNombre();
    }

    public function getEstado()
    {
        $this->__load();
        return parent::getEstado();
    }

    public function setEstado($estado)
    {
        $this->__load();
        return parent::setEstado($estado);
    }

    public function verificarEstado()
    {
        $this->__load();
        return parent::verificarEstado();
    }

    public function verificarEstadoSupervisor()
    {
        $this->__load();
        return parent::verificarEstadoSupervisor();
    }

    public function verificarEstadoAuditor($id)
    {
        $this->__load();
        return parent::verificarEstadoAuditor($id);
    }

    public function verificarEstadoUsuarios($contactos, $responsables, \Xtending\EntityBundle\Entity\Contactos $user)
    {
        $this->__load();
        return parent::verificarEstadoUsuarios($contactos, $responsables, $user);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'fechaInicio', 'nombre', 'estado', 'descripcionesVerificaciones', 'causasPropuestas', 'accionesEjecuciones', 'verificacionesEfectivas', 'formularioResultado');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}